{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.8.0.0",
        "fileVersion": "4.8.0-3.23524.11 (f43cd10b)",
        "semanticVersion": "4.8.0"
      },
      "results": [
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable property 'Value' must contain a non-null value when exiting constructor. Consider declaring the property as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/FunctionalHelpers/Maybe.cs",
                "region": {
                  "startLine": 6,
                  "startColumn": 26,
                  "endLine": 6,
                  "endColumn": 31
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/FunctionalHelpers/Maybe.cs",
                "region": {
                  "startLine": 6,
                  "startColumn": 26,
                  "endLine": 6,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'KeyValuePair<string, object>' cannot be used for parameter 'tag1' of type 'KeyValuePair<string, object?>' in 'void Counter<long>.Add(long delta, KeyValuePair<string, object?> tag1, KeyValuePair<string, object?> tag2)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "endLine": 44,
                  "endColumn": 112
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'KeyValuePair<string, object>' cannot be used for parameter 'tag2' of type 'KeyValuePair<string, object?>' in 'void Counter<long>.Add(long delta, KeyValuePair<string, object?> tag1, KeyValuePair<string, object?> tag2)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 45,
                  "startColumn": 17,
                  "endLine": 45,
                  "endColumn": 94
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'KeyValuePair<string, object>' cannot be used for parameter 'tag1' of type 'KeyValuePair<string, object?>' in 'void UpDownCounter<long>.Add(long delta, KeyValuePair<string, object?> tag1, KeyValuePair<string, object?> tag2)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 112
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'KeyValuePair<string, object>' cannot be used for parameter 'tag2' of type 'KeyValuePair<string, object?>' in 'void UpDownCounter<long>.Add(long delta, KeyValuePair<string, object?> tag1, KeyValuePair<string, object?> tag2)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "endLine": 50,
                  "endColumn": 94
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'KeyValuePair<string, object>' cannot be used for parameter 'tag1' of type 'KeyValuePair<string, object?>' in 'void Histogram<double>.Record(double value, KeyValuePair<string, object?> tag1, KeyValuePair<string, object?> tag2)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 64,
                  "startColumn": 21,
                  "endLine": 64,
                  "endColumn": 116
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'KeyValuePair<string, object>' cannot be used for parameter 'tag2' of type 'KeyValuePair<string, object?>' in 'void Histogram<double>.Record(double value, KeyValuePair<string, object?> tag1, KeyValuePair<string, object?> tag2)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 65,
                  "startColumn": 21,
                  "endLine": 65,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'KeyValuePair<string, object>' cannot be used for parameter 'tag1' of type 'KeyValuePair<string, object?>' in 'void UpDownCounter<long>.Add(long delta, KeyValuePair<string, object?> tag1, KeyValuePair<string, object?> tag2)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 69,
                  "startColumn": 21,
                  "endLine": 69,
                  "endColumn": 116
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8620",
          "level": "warning",
          "message": "Argument of type 'KeyValuePair<string, object>' cannot be used for parameter 'tag2' of type 'KeyValuePair<string, object?>' in 'void UpDownCounter<long>.Add(long delta, KeyValuePair<string, object?> tag1, KeyValuePair<string, object?> tag2)' due to differences in the nullability of reference types.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 70,
                  "startColumn": 21,
                  "endLine": 70,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS0162",
          "level": "warning",
          "message": "Unreachable code detected",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Commands/CheckCommsDirectCommandHandler.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 9,
                  "endLine": 21,
                  "endColumn": 12
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 2
          }
        },
        {
          "ruleId": "CS9113",
          "level": "warning",
          "message": "Parameter '_logger' is unread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/CommsCheckRulesEngineRuleRunEvents.cs",
                "region": {
                  "startLine": 8,
                  "startColumn": 52,
                  "endLine": 8,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable property 'HashKey' must contain a non-null value when exiting constructor. Consider declaring the property as nullable.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Extensions/HashWrapperOptions.cs",
                "region": {
                  "startLine": 4,
                  "startColumn": 19,
                  "endLine": 4,
                  "endColumn": 26
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Extensions/HashWrapperOptions.cs",
                "region": {
                  "startLine": 4,
                  "startColumn": 19,
                  "endLine": 4,
                  "endColumn": 26
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS1998",
          "level": "warning",
          "message": "This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Extensions/HashWrapper.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 31,
                  "endLine": 20,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8604",
          "level": "warning",
          "message": "Possible null reference argument for parameter 'existingBytes' in 'Task RuleRunMethodResultCacheService.WriteUpdatedItem(byte[] existingBytes, RuleRunMethodResultEvent notification)'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Services/RuleRunMethodResultCacheService.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 64,
                  "endLine": 36,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S125",
          "level": "warning",
          "message": "Remove this commented out code.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Commands/CheckCommsCommandHandler.cs",
                "region": {
                  "startLine": 27,
                  "startColumn": 9,
                  "endLine": 27,
                  "endColumn": 85
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S125",
          "level": "warning",
          "message": "Remove this commented out code.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Commands/CheckCommsDirectCommandHandler.cs",
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S125",
          "level": "warning",
          "message": "Remove this commented out code.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Commands/CheckCommsDirectCommandHandler.cs",
                "region": {
                  "startLine": 35,
                  "startColumn": 9,
                  "endLine": 35,
                  "endColumn": 26
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S125",
          "level": "warning",
          "message": "Remove this commented out code.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Program.cs",
                "region": {
                  "startLine": 114,
                  "startColumn": 1,
                  "endLine": 114,
                  "endColumn": 13
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2344",
          "level": "warning",
          "message": "Rename this enumeration to remove the 'Enum' suffix.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Api/CommAllowedEnum.cs",
                "region": {
                  "startLine": 3,
                  "startColumn": 13,
                  "endLine": 3,
                  "endColumn": 28
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2326",
          "level": "warning",
          "message": "'T' is not used in the interface.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/ICommCheckRule.cs",
                "region": {
                  "startLine": 8,
                  "startColumn": 33,
                  "endLine": 8,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2326",
          "level": "warning",
          "message": "'T' is not used in the interface.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/ICommsCheckRulesEngineRuleRun.cs",
                "region": {
                  "startLine": 3,
                  "startColumn": 48,
                  "endLine": 3,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2344",
          "level": "warning",
          "message": "Rename this enumeration to remove the 'Enum' suffix.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Api/RfREnum.cs",
                "region": {
                  "startLine": 3,
                  "startColumn": 13,
                  "endLine": 3,
                  "endColumn": 20
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2933",
          "level": "warning",
          "message": "Make '_slim' 'readonly'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Services/RuleRunMethodResultCacheService.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 27,
                  "endLine": 12,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2933",
          "level": "warning",
          "message": "Make '_getFromCache' 'readonly'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Services/RuleRunMethodResultCacheService.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 41,
                  "endLine": 14,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3604",
          "level": "warning",
          "message": "Remove the member initializer, all constructors set an initial value for the member.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Services/RuleRunMethodResultCacheService.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 33,
                  "endLine": 12,
                  "endColumn": 58
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3604",
          "level": "warning",
          "message": "Remove the member initializer, all constructors set an initial value for the member.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Services/RuleRunMethodResultCacheService.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 55,
                  "endLine": 14,
                  "endColumn": 92
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2933",
          "level": "warning",
          "message": "Make '_outcomes' 'readonly'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Services/RulesCombinerService.cs",
                "region": {
                  "startLine": 8,
                  "startColumn": 52,
                  "endLine": 8,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3241",
          "level": "warning",
          "message": "Change return type to 'void'; not a single caller uses the returned value.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Services/RulesCombinerService.cs",
                "region": {
                  "startLine": 21,
                  "startColumn": 13,
                  "endLine": 21,
                  "endColumn": 17
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3604",
          "level": "warning",
          "message": "Remove the member initializer, all constructors set an initial value for the member.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Services/RulesCombinerService.cs",
                "region": {
                  "startLine": 8,
                  "startColumn": 62,
                  "endLine": 8,
                  "endColumn": 116
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3604",
          "level": "warning",
          "message": "Remove the member initializer, all constructors set an initial value for the member.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Extensions/CommsCheckOptions.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 40,
                  "endLine": 12,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3604",
          "level": "warning",
          "message": "Remove the member initializer, all constructors set an initial value for the member.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Extensions/CommsCheckRulesEngineConfigurationOptions.cs",
                "region": {
                  "startLine": 5,
                  "startColumn": 39,
                  "endLine": 5,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2933",
          "level": "warning",
          "message": "Make '_logger' 'readonly'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 43,
                  "endLine": 14,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S4487",
          "level": "warning",
          "message": "Remove this unread private field '_logger' or refactor the code to use its value.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/CommsCheckRulesEngine.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 53,
                  "endLine": 12,
                  "endColumn": 60
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'WriteAsync' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Commands/CheckCommsCommandHandler.cs",
                "region": {
                  "startLine": 29,
                  "startColumn": 15,
                  "endLine": 29,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "S2971",
          "level": "warning",
          "message": "Drop 'Where' and move the condition into the 'FirstOrDefault'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Api/CommsCheckAnswerResponseDto.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 32,
                  "endLine": 33,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3928",
          "level": "warning",
          "message": "Use a constructor overloads that allows a more meaningful exception message to be provided.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/FunctionalHelpers/ForkExtensionMethods.cs",
                "region": {
                  "startLine": 37,
                  "startColumn": 28,
                  "endLine": 37,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2971",
          "level": "warning",
          "message": "Drop 'Where' and move the condition into the 'FirstOrDefault'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Api/CommsCheckAnswerResponseDto.cs",
                "region": {
                  "startLine": 50,
                  "startColumn": 32,
                  "endLine": 50,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2208",
          "level": "note",
          "message": "Call the ArgumentOutOfRangeException constructor that contains a message and/or paramName parameter",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/FunctionalHelpers/ForkExtensionMethods.cs",
                "region": {
                  "startLine": 37,
                  "startColumn": 28,
                  "endLine": 37,
                  "endColumn": 61
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2589",
          "level": "warning",
          "message": "Change this condition so that it does not always evaluate to 'False'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Api/CommsCheckAnswerResponseDto.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 29,
                  "endLine": 51,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2589",
          "level": "warning",
          "message": "Change this condition so that it does not always evaluate to 'False'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Api/CommsCheckAnswerResponseDto.cs",
                "region": {
                  "startLine": 34,
                  "startColumn": 29,
                  "endLine": 34,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2254",
          "level": "note",
          "message": "The logging message template should not vary between calls to 'LoggerExtensions.LogInformation(ILogger, string?, params object?[])'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/LoggingCommandsBehavior.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "endLine": 16,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2254",
          "level": "note",
          "message": "The logging message template should not vary between calls to 'LoggerExtensions.LogInformation(ILogger, string?, params object?[])'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/LoggingCommandsBehavior.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 32,
                  "endLine": 18,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S112",
          "level": "warning",
          "message": "'System.Exception' should not be thrown by user code.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/CommsCheckRulesEngine.cs",
                "region": {
                  "startLine": 34,
                  "startColumn": 19,
                  "endLine": 34,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2254",
          "level": "note",
          "message": "The logging message template should not vary between calls to 'LoggerExtensions.LogInformation(ILogger, string?, params object?[])'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "endLine": 37,
                  "endColumn": 137
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2254",
          "level": "note",
          "message": "The logging message template should not vary between calls to 'LoggerExtensions.LogInformation(ILogger, string?, params object?[])'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 36,
                  "endLine": 52,
                  "endColumn": 163
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2254",
          "level": "note",
          "message": "The logging message template should not vary between calls to 'LoggerExtensions.LogInformation(ILogger, string?, params object?[])'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/PublishWithMetricsAndLogging.cs",
                "region": {
                  "startLine": 61,
                  "startColumn": 40,
                  "endLine": 61,
                  "endColumn": 167
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2254",
          "level": "note",
          "message": "The logging message template should not vary between calls to 'LoggerExtensions.LogInformation(ILogger, string?, params object?[])'",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/Mediatr/AllICommsCheckEventHandler.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 32,
                  "endLine": 14,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'GetMethod' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/CommsCheckRulesEngineRuleRunEvents.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 20,
                  "endLine": 20,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'ct' parameter to the 'Publish' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/CommsCheckRulesEngine.cs",
                "region": {
                  "startLine": 43,
                  "startColumn": 19,
                  "endLine": 43,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "ct",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'stoppingToken' parameter to the 'Publish' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/HostedServices/CommsCheckHostedService.cs",
                "region": {
                  "startLine": 17,
                  "startColumn": 18,
                  "endLine": 17,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "stoppingToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'MetricStart' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/MaybeItemToCheckEventHandler.cs",
                "region": {
                  "startLine": 46,
                  "startColumn": 23,
                  "endLine": 46,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1822",
          "level": "note",
          "message": "Member 'MetricsStop' does not access instance data and can be marked as static",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/MaybeItemToCheckEventHandler.cs",
                "region": {
                  "startLine": 53,
                  "startColumn": 18,
                  "endLine": 53,
                  "endColumn": 29
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'Publish' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/RunRulesExplicitBlockHandler.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 15,
                  "endLine": 14,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'Publish' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/RunRulesExplicitBlockAllHandler.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 15,
                  "endLine": 14,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'Publish' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/RunRulesAllowdHandler.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 15,
                  "endLine": 13,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "S6608",
          "level": "warning",
          "message": "Indexing at 0 should be used instead of the \"Enumerable\" extension method \"First\"",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/RuleResultsCombinedEventHandler.cs",
                "region": {
                  "startLine": 18,
                  "startColumn": 25,
                  "endLine": 18,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S6608",
          "level": "warning",
          "message": "Indexing at 0 should be used instead of the \"Enumerable\" extension method \"First\"",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/RuleResultsCombinedEventHandler.cs",
                "region": {
                  "startLine": 24,
                  "startColumn": 25,
                  "endLine": 24,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'Publish' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/RuleResultsCombinedEventHandler.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 26,
                  "endLine": 14,
                  "endColumn": 44
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'Publish' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/RuleResultsCombinedEventHandler.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 30,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "CA2016",
          "level": "note",
          "message": "Forward the 'cancellationToken' parameter to the 'Publish' method or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/CommsCheckRulesEngine/Handlers/RuleResultsCombinedEventHandler.cs",
                "region": {
                  "startLine": 26,
                  "startColumn": 18,
                  "endLine": 26,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "ArgumentName": "cancellationToken",
              "ParameterName": null,
              "ShouldFix": "1"
            }
          }
        },
        {
          "ruleId": "S3060",
          "level": "warning",
          "message": "Offload the code that's conditional on this type test to the appropriate subclass and remove the condition.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/ReasonForRemovals/IReasonForRemoval.cs",
                "region": {
                  "startLine": 9,
                  "startColumn": 30,
                  "endLine": 9,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3060",
          "level": "warning",
          "message": "Offload the code that's conditional on this type test to the appropriate subclass and remove the condition.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/ReasonForRemovals/IReasonForRemoval.cs",
                "region": {
                  "startLine": 11,
                  "startColumn": 27,
                  "endLine": 11,
                  "endColumn": 53
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3060",
          "level": "warning",
          "message": "Offload the code that's conditional on this type test to the appropriate subclass and remove the condition.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/ReasonForRemovals/IReasonForRemoval.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 31,
                  "endLine": 13,
                  "endColumn": 57
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3060",
          "level": "warning",
          "message": "Offload the code that's conditional on this type test to the appropriate subclass and remove the condition.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/RuleOutcomes/IRuleOutcome.cs",
                "region": {
                  "startLine": 20,
                  "startColumn": 16,
                  "endLine": 20,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3060",
          "level": "warning",
          "message": "Offload the code that's conditional on this type test to the appropriate subclass and remove the condition.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///home/rb/source/rossbuggins-public/commcheck-api/CommsCheck/RuleOutcomes/IRuleOutcome.cs",
                "region": {
                  "startLine": 25,
                  "startColumn": 16,
                  "endLine": 25,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "CA1822": {
          "id": "CA1822",
          "shortDescription": "Mark members as static",
          "fullDescription": "Members that do not access instance data or call instance methods can be marked as static. After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. This can give you a measurable performance gain for performance-sensitive code.",
          "defaultLevel": "note",
          "helpUri": "https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1822",
          "properties": {
            "category": "Performance",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA2016": {
          "id": "CA2016",
          "shortDescription": "Forward the 'CancellationToken' parameter to methods",
          "fullDescription": "Forward the 'CancellationToken' parameter to methods to ensure the operation cancellation notifications gets properly propagated, or pass in 'CancellationToken.None' explicitly to indicate intentionally not propagating the token.",
          "defaultLevel": "note",
          "helpUri": "https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2016",
          "properties": {
            "category": "Reliability",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA2208": {
          "id": "CA2208",
          "shortDescription": "Instantiate argument exceptions correctly",
          "fullDescription": "A call is made to the default (parameterless) constructor of an exception type that is or derives from ArgumentException, or an incorrect string argument is passed to a parameterized constructor of an exception type that is or derives from ArgumentException.",
          "defaultLevel": "note",
          "helpUri": "https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2208",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CA2254": {
          "id": "CA2254",
          "shortDescription": "Template should be a static expression",
          "fullDescription": "The logging message template should not vary between calls.",
          "defaultLevel": "note",
          "helpUri": "https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2254",
          "properties": {
            "category": "Usage",
            "isEnabledByDefault": true,
            "tags": [
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CS0162": {
          "id": "CS0162",
          "shortDescription": "Unreachable code detected",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS0162)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS1998": {
          "id": "CS1998",
          "shortDescription": "Async method lacks 'await' operators and will run synchronously",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS1998)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8604": {
          "id": "CS8604",
          "shortDescription": "Possible null reference argument.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8604)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8618": {
          "id": "CS8618",
          "shortDescription": "Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8618)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8620": {
          "id": "CS8620",
          "shortDescription": "Argument cannot be used for parameter due to differences in the nullability of reference types.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8620)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS9113": {
          "id": "CS9113",
          "shortDescription": "Parameter is unread.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS9113)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "S112": {
          "id": "S112",
          "shortDescription": "General exceptions should never be thrown",
          "fullDescription": "Throwing such general exceptions as Exception, SystemException, ApplicationException, IndexOutOfRangeException, NullReferenceException, OutOfMemoryException and ExecutionEngineException prevents calling methods from handling true, system-generated exceptions differently than application-generated errors.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-112",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S125": {
          "id": "S125",
          "shortDescription": "Sections of code should not be commented out",
          "fullDescription": "Programmers should not comment out code as it bloats programs and reduces readability.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-125",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S2326": {
          "id": "S2326",
          "shortDescription": "Unused type parameters should be removed",
          "fullDescription": "Type parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2326",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S2344": {
          "id": "S2344",
          "shortDescription": "Enumeration type names should not have \"Flags\" or \"Enum\" suffixes",
          "fullDescription": "The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2344",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S2589": {
          "id": "S2589",
          "shortDescription": "Boolean expressions should not be gratuitous",
          "fullDescription": "An operand of a boolean expression that never changes the result of the expression might not match the programmer’s intent and can lead to unexpected behavior and potential bugs.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2589",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S2933": {
          "id": "S2933",
          "shortDescription": "Fields that are only assigned in the constructor should be \"readonly\"",
          "fullDescription": "readonly fields can only be assigned in a class constructor. If a class has a field that’s not marked readonly but is only set in the constructor, it could cause confusion about the field’s intended use. To avoid confusion, such fields should be marked readonly to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2933",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S2971": {
          "id": "S2971",
          "shortDescription": "\"IEnumerable\" LINQs should be simplified",
          "fullDescription": "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways IEnumerable language integrated queries (LINQ) can be simplified",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2971",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3060": {
          "id": "S3060",
          "shortDescription": "\"is\" should not be used with \"this\"",
          "fullDescription": "One of the possible ways of performing type-testing is via the is operator: food is Pizza.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3060",
          "properties": {
            "category": "Blocker Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3241": {
          "id": "S3241",
          "shortDescription": "Methods should not return values that are never used",
          "fullDescription": "Private methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their callers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3241",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3604": {
          "id": "S3604",
          "shortDescription": "Member initializer values should not be redundant",
          "fullDescription": "Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same time is redundant; the inline initialization will be overridden.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3604",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3928": {
          "id": "S3928",
          "shortDescription": "Parameter names used into ArgumentException constructors should match an existing one ",
          "fullDescription": "Some constructors of the ArgumentException, ArgumentNullException, ArgumentOutOfRangeException and DuplicateWaitObjectException classes must be fed with a valid parameter name. This rule raises an issue in two cases:",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3928",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S4487": {
          "id": "S4487",
          "shortDescription": "Unread \"private\" fields should be removed",
          "fullDescription": "Private fields which are written but never read are a case of \"dead store\". Changing the value of such a field is useless and most probably indicates an error in the code.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-4487",
          "properties": {
            "category": "Critical Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S6608": {
          "id": "S6608",
          "shortDescription": "Prefer indexing instead of \"Enumerable\" methods on types implementing \"IList\"",
          "fullDescription": "Indexes in C# provide direct access to an element at a specific position within an array or collection. When compared to Enumerable methods, indexing can be more efficient for certain scenarios, such as iterating over a large collection, due to avoiding the overhead of checking the underlying collection type before accessing it.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-6608",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        }
      }
    }
  ]
}